/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopyfinal;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Suthar
 */
public class Market_Analysis extends javax.swing.JFrame {

    String baseadd = "D:/Shopy/Shopy", logo, Add, user = "1501", yr = "2020", lang = "English";

    /**
     * Creates new form Graphs
     */
    public Market_Analysis() {

        initComponents();
        //year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2020", "2021", "2022" }));

        Calendar cal = new GregorianCalendar();
        for (int j = 0; j < 10; ++j) {
            year.addItem(String.format("%04d", cal.get(Calendar.YEAR) - j));
        }

        if (comb.getSelectedIndex() == 0) {
            code.setText("ALL");
            code.setEditable(false);
        } else {
            code.setText("0001");
        }

        if (interval.getSelectedIndex() == 0) {
            month.setEnabled(true);
            year.setEnabled(true);
        } else {
            if (interval.getSelectedIndex() == 1) {
                month.setEnabled(false);
                year.setEnabled(true);
            } else {
                month.setEnabled(false);
                year.setEnabled(true);
            }
        }
        LOADDATA();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        done = new javax.swing.JButton();
        panelchart = new javax.swing.JPanel();
        comb = new javax.swing.JComboBox();
        code = new javax.swing.JTextField();
        month = new javax.swing.JComboBox();
        interval = new javax.swing.JComboBox();
        stream = new javax.swing.JComboBox();
        year = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        done.setText("All Setted");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        panelchart.setBackground(new java.awt.Color(0, 0, 255));
        panelchart.setLayout(new java.awt.BorderLayout());

        comb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Combined", "Differentaly" }));
        comb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combItemStateChanged(evt);
            }
        });

        code.setText("ALL");
        code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codeKeyTyped(evt);
            }
        });

        month.setMaximumRowCount(12);
        month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthActionPerformed(evt);
            }
        });

        interval.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Daily", "Monthly", "Yearly" }));
        interval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                intervalItemStateChanged(evt);
            }
        });

        stream.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Customer", "Party", "Combine", "Both" }));
        stream.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                streamItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelchart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(35, Short.MAX_VALUE)
                        .addComponent(stream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(interval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(comb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(done)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(done)
                    .addComponent(comb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelchart, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        yr = year.getSelectedItem().toString();
        int cp = 0, com = 0;
        Add = baseadd + "/" + user;
        dataset.clear();
        if (stream.getSelectedIndex() == 1) {
            cp = 1;
        } else if (stream.getSelectedIndex() == 2) {
            com = 1;
        } else if (stream.getSelectedIndex() == 3) {
            com = 2;
        }

        if (com == 0) {
            if (interval.getSelectedIndex() == 0) {//On Daily Basis
                int NoofDy = DayInMonth(month.getSelectedIndex());
                for (int dy = 0; dy < NoofDy; ++dy) {
                    statusPRT(code.getText(), dater_Day(dy, month.getSelectedIndex()), dater_Day(dy, month.getSelectedIndex()), cp, String.format("%02d", dy + 1));
                }
            } else {
                if (interval.getSelectedIndex() == 1) {//On Monthly
                    for (int mn = 0; mn < 12; ++mn) {
                        statusPRT(code.getText(), dater_Day(0, mn), dater_Day(DayInMonth(mn) - 1, mn), cp, monthname(mn));
                    }
                } else {//Yearly
                    Calendar cal = new GregorianCalendar();
                    int NoofYear = cal.get(Calendar.YEAR) - Integer.valueOf(year.getSelectedItem().toString());
                    for (int i = 0; i <= NoofYear; ++i) {
                        statusPRT(code.getText(), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), cp, String.valueOf(i + Integer.valueOf(year.getSelectedItem().toString())));
                    }
                }
            }
        } else if (com == 1) {
            if (interval.getSelectedIndex() == 0) {//On Daily Basis
                int NoofDy = DayInMonth(month.getSelectedIndex());
                for (int dy = 0; dy < NoofDy; ++dy) {
                    statusCombine(code.getText(), dater_Day(dy, month.getSelectedIndex()), dater_Day(dy, month.getSelectedIndex()), String.format("%02d", dy + 1));
                }
            } else {
                if (interval.getSelectedIndex() == 1) {//On Monthly
                    for (int mn = 0; mn < 12; ++mn) {
                        statusCombine(code.getText(), dater_Day(0, mn), dater_Day(DayInMonth(mn) - 1, mn), monthname(mn));
                    }
                } else {//Yearly
                    Calendar cal = new GregorianCalendar();
                    int NoofYear = cal.get(Calendar.YEAR) - Integer.valueOf(year.getSelectedItem().toString());
                    for (int i = 0; i <= NoofYear; ++i) {
                        statusCombine(code.getText(), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), String.valueOf(i + Integer.valueOf(year.getSelectedItem().toString())));
                    }
                }
            }
        } else {
            if (interval.getSelectedIndex() == 0) {//On Daily Basis
                int NoofDy = DayInMonth(month.getSelectedIndex());
                for (int dy = 0; dy < NoofDy; ++dy) {
                    statusBoth(code.getText(), dater_Day(dy, month.getSelectedIndex()), dater_Day(dy, month.getSelectedIndex()), String.format("%02d", dy + 1));
                }
            } else {
                if (interval.getSelectedIndex() == 1) {//On Monthly
                    for (int mn = 0; mn < 12; ++mn) {
                        statusBoth(code.getText(), dater_Day(0, mn), dater_Day(DayInMonth(mn) - 1, mn), monthname(mn));
                    }
                } else {//Yearly
                    Calendar cal = new GregorianCalendar();
                    int NoofYear = cal.get(Calendar.YEAR) - Integer.valueOf(year.getSelectedItem().toString());
                    for (int i = 0; i <= NoofYear; ++i) {
                        statusBoth(code.getText(), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), dater_year(i + Integer.valueOf(year.getSelectedItem().toString())), String.valueOf(i + Integer.valueOf(year.getSelectedItem().toString())));
                    }
                }
            }
        }

        String anaOF = "Someone", X_lbl = "Time";

        JFreeChart barChart = ChartFactory.createLineChart(anaOF, X_lbl, "Amount", dataset, PlotOrientation.VERTICAL, true, true, false);
        //JFreeChart barChart =ChartFactory.createLineChart3D(anaOF, "Year", "Amount", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot barchrt = barChart.getCategoryPlot();
        barchrt.setRangeGridlinePaint(Color.BLUE);
        ChartPanel barpanel = new ChartPanel(barChart);
        //barpanel.setBackground(Color.WHITE);
        panelchart.removeAll();
        panelchart.add(barpanel, BorderLayout.CENTER);
        panelchart.validate();
        this.repaint();

    }//GEN-LAST:event_doneActionPerformed
    public void statusPRT(String cd, String dt1, String dt2, int cp, String X) {
        int res1 = 0, res2 = 0;
        String cmrprt = "customer.txt", naming = "Customer";
        if (cp == 1) {
            cmrprt = "party.txt";
            naming = "Party";
        }
        String Add1 = Add + "/customer";
        if (cp == 1) {
            Add1 = Add + "/party";
        }
        if (cd.compareToIgnoreCase("ALL") == 0) {//combined basis

            try {
                Scanner read = new Scanner(new File(Add1 + "/" + cmrprt), "UTF-8");
                read.useDelimiter("\\n");

                while (read.hasNext()) // It's for user ... equals to the number of user
                {
                    String cod = read.nextLine();

                    res1 += indstatusT(Add1, cod, dt1, dt2, cp);
                    res2 += indstatusG(Add1, cod, dt1, dt2, cp);
                    System.out.println("code:" + cod + " Taken:" + res1 + " Given:" + res2 + " dt1:" + dt1 + " dt2:" + dt2);
                }
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        } else {//on indivisual basis
            res1 += indstatusT(Add1, String.format("%04d", Integer.valueOf(cd)), dt1, dt2, cp);
            res2 += indstatusG(Add1, String.format("%04d", Integer.valueOf(cd)), dt1, dt2, cp);

        }
        dataset.addValue(res1, naming + " Taken", X);
        dataset.addValue(res2, naming + " Given", X);

    }

    public void statusCombine(String cd, String dt1, String dt2, String X) {
        int res1 = 0, res2 = 0;
        String cmrprt = "customer.txt";
        int cp = 0;
        String Add1 = Add + "/customer";
        String Add2 = Add + "/party";
        if (cd.compareToIgnoreCase("ALL") == 0) {//combined basis

            try {
                Scanner read = new Scanner(new File(Add1 + "/" + cmrprt), "UTF-8");
                read.useDelimiter("\\n");

                while (read.hasNext()) // It's for user ... equals to the number of user
                {
                    String cod = read.nextLine();
                    res1 += indstatusT(Add1, cod, dt1, dt2, cp);
                    res2 += indstatusG(Add1, cod, dt1, dt2, cp);

                }
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        }
        cp = 1;
        cmrprt = "party.txt";
        if (cd.compareToIgnoreCase("ALL") == 0) {//combined basis

            try {
                Scanner read = new Scanner(new File(Add2 + "/" + cmrprt), "UTF-8");
                read.useDelimiter("\\n");

                while (read.hasNext()) // It's for user ... equals to the number of user
                {
                    String cod = read.nextLine();
                    res1 += indstatusT(Add2, cod, dt1, dt2, cp);
                    res2 += indstatusG(Add2, cod, dt1, dt2, cp);

                }
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("not getting access to Party member  !!! Error0007");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        }
        dataset.addValue(res1, "Combine Taken", X);
        dataset.addValue(res2, "Combine Given", X);

    }

    public void statusBoth(String cd, String dt1, String dt2, String X) {
        int res1 = 0, res2 = 0;
        String cmrprt = "customer.txt";
        int cp = 0;
        String Add1 = Add + "/customer";
        String Add2 = Add + "/party";
        if (cd.compareToIgnoreCase("ALL") == 0) {//combined basis

            try {
                Scanner read = new Scanner(new File(Add1 + "/" + cmrprt), "UTF-8");
                read.useDelimiter("\\n");

                while (read.hasNext()) // It's for user ... equals to the number of user
                {
                    String cod = read.nextLine();
                    res1 += indstatusT(Add1, cod, dt1, dt2, cp);
                    res2 += indstatusG(Add1, cod, dt1, dt2, cp);

                }
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        }
        dataset.addValue(res1, "Customer Taken", X);
        dataset.addValue(res2, "Customer Given", X);
        res1 = 0;
        res2 = 0;
        cp = 1;
        cmrprt = "party.txt";
        if (cd.compareToIgnoreCase("ALL") == 0) {//combined basis

            try {
                System.out.println(Add2 + "/" + cmrprt);
                Scanner read = new Scanner(new File(Add2 + "/" + cmrprt), "UTF-8");
                read.useDelimiter("\\n");

                while (read.hasNext()) // It's for user ... equals to the number of user
                {
                    String cod = read.nextLine();
                    System.out.println("Code:" + cod);
                    res1 += indstatusT(Add2, cod, dt1, dt2, cp);
                    res2 += indstatusG(Add2, cod, dt1, dt2, cp);

                }
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("not getting access to Party member  !!! Error0007");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        }
        dataset.addValue(res1, "Party Taken", X);
        dataset.addValue(res2, "Party Given", X);

    }
    private void intervalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_intervalItemStateChanged
        if (interval.getSelectedIndex() == 0) {
            month.setEnabled(true);
            year.setEnabled(true);
        } else {
            if (interval.getSelectedIndex() == 1) {
                month.setEnabled(false);
                year.setEnabled(true);
            } else {
                month.setEnabled(false);
                year.setEnabled(true);;
            }
        }
    }//GEN-LAST:event_intervalItemStateChanged

    private void codeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == 10)) {    //
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_codeKeyTyped

    private void codeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            done.doClick();
        }
    }//GEN-LAST:event_codeKeyPressed

    private void combItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combItemStateChanged
        if (comb.getSelectedIndex() == 0) {
            code.setText("ALL");
            code.setEditable(false);
        } else {
            code.setText("cash");
        }
    }//GEN-LAST:event_combItemStateChanged

    private void streamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_streamItemStateChanged
        if (stream.getSelectedIndex() == 2 || stream.getSelectedIndex() == 3) {
            comb.setEnabled(false);
            code.setEnabled(false);
        } else {
            comb.setEnabled(true);
            code.setEnabled(true);
        }
    }//GEN-LAST:event_streamItemStateChanged

    private void monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthActionPerformed
    public int DayInMonth(int mn) {
        int res = 0;
        switch (mn) {
            case 0:
                res = 31;
                break;
            case 1:
                res = Integer.valueOf(isleap(yr));
                break;
            case 2:
                res = 31;
                break;
            case 3:
                res = 30;
                break;
            case 4:
                res = 31;
                break;
            case 5:
                res = 30;
                break;
            case 6:
                res = 31;
                break;
            case 7:
                res = 31;
                break;
            case 8:
                res = 30;
                break;
            case 9:
                res = 31;
                break;
            case 10:
                res = 30;
                break;
            case 11:
                res = 31;
                break;

        }
        return res;
    }

    public String dater_Day(int dy, int mn) { //Daily
        String res = "01/01/2021";
        res = String.format("%02d", dy + 1) + "/" + String.format("%02d", ++mn) + "/" + yr;
        return res;
    }

    public String dater_year(int y) {
        String res = "01/01/2020";
        res = "31/12/" + String.valueOf(y);
        return res;
    }

    public String analysisof(String str, int cp) {
        String res = "Analysis of ";
        if (str.compareToIgnoreCase("All") == 0) {
            res += "All";
        } else {
            str = String.format("%04d", Integer.valueOf(str));
            String Add1 = Add + "/customer";
            if (cp == 1) {
                Add1 = Add + "/party";
            }
            res += CMRxName(Add1, str) + "(" + str + ")";
        }
        return res;
    }

    public String CMRxName(String AddP, String cdd) {       // It find the name of customer name with respect to Costmer code
        String name = "Unkown", cmrprt = "customer.txt";

        if (stream.getSelectedIndex() == 0) {//Means Customer
            cmrprt = "customer.txt";
        } else {
            cmrprt = "party.txt";
        }
        if (RepeatationIntCase.mainn(AddP, cmrprt, cdd) == 1) {          //<<<<<<<<<<<<<<<<<<<Name field completion automatically

            Scanner read;

            try {
                read = new Scanner(new File(AddP + "/" + cdd + "/profile.txt"), "UTF-8");
                read.useDelimiter("\\n");
                read.nextLine();
                String Ecnam = read.nextLine();
                String Hcnam = read.nextLine();
                if (lang.compareToIgnoreCase("English") != 0) {
                    name = Hcnam;
                } else {
                    name = Ecnam;
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Market_Analysis.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return name;

    }

    public int indstatusT(String AddP, String cd, String dt1, String dt2, int cp) {  //cp==0::Customer ||cp==1 for Party

        String pcode = "0001";
        float TotalT = (float) 000.00;
        String CTstr1 = "000.00";
        pcode = cd;//read.nextLine();
        Scanner inread;
        String str = "party.txt";
        if (cp == 0) {
            str = "customer.txt";
        }
        try {
            if (repeatation.mainn(AddP, str, pcode) == 1) {

//#########################################################################################################################################################              
                File tmp = new File(AddP + "/" + pcode + "/profile.txt");
                boolean fs = tmp.exists();

//########################################################################################################
                for (String ttd = dt1; DateInBetween.mainn(dt1, ttd, dt2); ttd = datep15.mainn(ttd)) {                             //To find the earliest Existing file
                    tmp = new File(AddP + "/" + pcode + "/Pending/Taken/" + NamingDateName.mainn(ttd) + ".txt");
                    fs = tmp.exists();
                    if (fs) {
                        //    System.out.print(AddP+"/"+pcode+"/Pending/Taken/"+NamingDateName.mainn(ttd)+".txt");
                        inread = new Scanner(tmp, "UTF-8");          // to get the name of customer
                        inread.useDelimiter(",|\\n");
                        inread.nextLine();
                        //inread.nextLine();
                        while (inread.hasNext()) {
                            String datee = inread.next();
                            if (DateInBetween.mainn(dt1, datee, dt2)) {
                                inread.next();
                                inread.next();
                                inread.next();
                                inread.next();
                                CTstr1 = inread.next();                // name of customer having code pcode
                                TotalT = TotalT + Float.valueOf(CTstr1);
                            } else {
                                inread.nextLine();
                            }
                        }
                        inread.close();
                    }
                }

//########################################################################################################
            }
        } catch (FileNotFoundException ex) {
            JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        //System.out.println("  TotalT:"+TotalT);
        return Math.round(TotalT);
    }

    public int indstatusG(String AddP, String cd, String dt1, String dt2, int cp) {
        String pcode = "01/01/2020";
        float TotalG = (float) 000.00;
        String CGstr1 = "000.00";
        pcode = cd;//read.nextLine();
        Scanner inread;
        String str = "party.txt";
        if (cp == 0) {
            str = "customer.txt";
        }
        try {
            if (repeatation.mainn(AddP, str, pcode) == 1) {

//#########################################################################################################################################################              
                File tmp = new File(AddP + "/" + pcode + "/profile.txt");
                boolean fs = tmp.exists();

//########################################################################################################
                for (String ttd = dt1; DateInBetween.mainn(dt1, ttd, dt2); ttd = datep15.mainn(ttd)) {                             //To find the earliest Existing file
                    tmp = new File(AddP + "/" + pcode + "/Pending/Given/" + NamingDateName.mainn(ttd) + ".txt");
                    fs = tmp.exists();
                    if (fs) {

                        inread = new Scanner(tmp, "UTF-8");          // to get the name of customer
                        inread.useDelimiter(",|\\n");
                        inread.nextLine();
                        inread.nextLine();
                        while (inread.hasNext()) {
                            String datee = inread.next();
                            if (DateInBetween.mainn(dt1, datee, dt2)) {
                                inread.next();
                                inread.next();
                                inread.next();
                                inread.next();
                                CGstr1 = inread.next();  // name of customer having code pcode
                                TotalG = TotalG + Float.valueOf(CGstr1);
                            } else {
                                inread.nextLine();
                            }
                        }
                        inread.close();
                    }

                }

//########################################################################################################
            }
        } catch (FileNotFoundException ex) {
            JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return Math.round(TotalG);
    }

    public String dater(int o) { //Monthly
        String res = "01/01/2021";
        switch (o) {
            case 0:
                res = "31/01/" + yr;
                break;
            case 1:
                res = isleap(yr) + "/02/" + yr;
                break;
            case 2:
                res = "31/03/" + yr;
                break;
            case 3:
                res = "30/04/" + yr;
                break;
            case 4:
                res = "31/05/" + yr;
                break;
            case 5:
                res = "30/06/" + yr;
                break;
            case 6:
                res = "31/07/" + yr;
                break;
            case 7:
                res = "31/08/" + yr;
                break;
            case 8:
                res = "30/09/" + yr;
                break;
            case 9:
                res = "31/10/" + yr;
                break;
            case 10:
                res = "30/11/" + yr;
                break;
            case 11:
                res = "31/12/" + yr;
                break;

        }
        return res;
    }

    public String dater(int o, int dy) { //Daily
        String res = "01/01/2021";
        res = String.format("%02d", dy + 1) + "/" + String.format("%02d", ++o) + "/" + yr;
        return res;
    }

    public String isleap(String yr) {
        int intyr = Integer.valueOf(yr);
        if (((intyr % 4 == 0) && (intyr % 100 != 0)) || (intyr % 400 == 0)) {
            return "29";
        } else {
            return "28";
        }
    }

    public String monthname(int o) {
        String res = "";
        switch (o) {
            case 0:
                res = "January";
                break;
            case 1:
                res = "February";
                break;
            case 2:
                res = "March";
                break;
            case 3:
                res = "April";
                break;
            case 4:
                res = "May";
                break;
            case 5:
                res = "June";
                break;
            case 6:
                res = "July";
                break;
            case 7:
                res = "August";
                break;
            case 8:
                res = "September";
                break;
            case 9:
                res = "October";
                break;
            case 10:
                res = "November";
                break;
            case 11:
                res = "December";
                break;

        }
        return res;
    }

    private void LOADDATA() {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Market_Analysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Market_Analysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Market_Analysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Market_Analysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Market_Analysis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField code;
    private javax.swing.JComboBox comb;
    private javax.swing.JButton done;
    private javax.swing.JComboBox interval;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox month;
    private javax.swing.JPanel panelchart;
    private javax.swing.JComboBox stream;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables

}
