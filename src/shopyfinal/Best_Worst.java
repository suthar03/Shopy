/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopyfinal;

import java.awt.Font;
import java.util.List;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Suthar
 */
public class Best_Worst extends javax.swing.JFrame {

    String baseadd = "D:/Shopy/Shopy", logo, Add, user = "1501", yr = "2020", lang = "English", code = "0001";

    /**
     * Creates new form Best_Worse
     */
    public Best_Worst() {
        initComponents();

        Calendar cal = new GregorianCalendar();
        for (int j = 0; j < 10; ++j) {
            year.addItem(String.format("%04d", cal.get(Calendar.YEAR) - j));
        }

        if (interval.getSelectedIndex() == 0) {
            month.setEnabled(true);
            year.setEnabled(true);
        } else {
            month.setEnabled(false);
            year.setEnabled(true);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
        table.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToSort = 2;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        CMRorPRT = new javax.swing.JComboBox();
        interval = new javax.swing.JComboBox();
        year = new javax.swing.JComboBox();
        month = new javax.swing.JComboBox();
        done = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));
        jPanel1.setAlignmentX(0.5F);
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setAlignmentY(0.5F);
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 25));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.X_AXIS));

        CMRorPRT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Customer", "Party" }));
        CMRorPRT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CMRorPRTItemStateChanged(evt);
            }
        });
        jPanel2.add(CMRorPRT);

        interval.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly", "Yearly" }));
        interval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                intervalItemStateChanged(evt);
            }
        });
        interval.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                intervalFocusLost(evt);
            }
        });
        interval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalActionPerformed(evt);
            }
        });
        jPanel2.add(interval);

        year.setToolTipText("2021");
        year.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearItemStateChanged(evt);
            }
        });
        jPanel2.add(year);

        month.setMaximumRowCount(12);
        month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        month.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthItemStateChanged(evt);
            }
        });
        jPanel2.add(month);

        done.setText("All Setted");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });
        jPanel2.add(done);

        jPanel1.add(jPanel2);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(2);
            table.getColumnModel().getColumn(1).setPreferredWidth(4);
            table.getColumnModel().getColumn(2).setPreferredWidth(2);
        }

        jPanel1.add(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CMRorPRTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CMRorPRTItemStateChanged

    }//GEN-LAST:event_CMRorPRTItemStateChanged

    private void intervalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_intervalItemStateChanged

        if (interval.getSelectedIndex() == 1) {
            month.setEnabled(true);
            year.setEnabled(true);
        } else {
            month.setEnabled(false);
            year.setEnabled(true);
        }

    }//GEN-LAST:event_intervalItemStateChanged

    private void intervalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_intervalFocusLost

    }//GEN-LAST:event_intervalFocusLost

    private void intervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intervalActionPerformed

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed

        yr = year.getSelectedItem().toString();

        if (CMRorPRT.getSelectedIndex() == 0) {//Means Customer
            Add = baseadd + "/" + user + "/customer";
        } else {
            Add = baseadd + "/" + user + "/party";
        }
        if (interval.getSelectedIndex() == 1) {//On Monthly
            status(dater_Day(0, month.getSelectedIndex()), dater_Day(DayInMonth(month.getSelectedIndex()) - 1, month.getSelectedIndex()));
        } else {//Yearly
            status(dater_Day(0, 0), dater_Day(DayInMonth(11) - 1, 11));
        }

    }//GEN-LAST:event_doneActionPerformed

    private void monthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthItemStateChanged

    }//GEN-LAST:event_monthItemStateChanged

    private void yearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearItemStateChanged
        //is month is February

    }//GEN-LAST:event_yearItemStateChanged
    public int DayInMonth(int mn) {
        int res = 0;
        switch (mn) {
            case 0:
                res = 31;
                break;
            case 1:
                res = Integer.valueOf(isleap(yr));
                break;
            case 2:
                res = 31;
                break;
            case 3:
                res = 30;
                break;
            case 4:
                res = 31;
                break;
            case 5:
                res = 30;
                break;
            case 6:
                res = 31;
                break;
            case 7:
                res = 31;
                break;
            case 8:
                res = 30;
                break;
            case 9:
                res = 31;
                break;
            case 10:
                res = 30;
                break;
            case 11:
                res = 31;
                break;

        }
        return res;
    }

    public String analysisof(String str) {
        String res = "Analysis of ";
        if (str.compareToIgnoreCase("All") == 0) {
            res += "All";
        } else {
            str = String.format("%04d", Integer.valueOf(str));
            res += CMRxName(str) + "(" + str + ")";
        }
        return res;
    }

    public String CMRxName(String cdd) {       // It find the name of customer name with respect to Costmer code
        String name = "Unkown";
        String str = "party.txt";
        if (CMRorPRT.getSelectedIndex() == 0) {
            str = "customer.txt";
        }
        if (ShortFunction.RepeatationIntCase(Add, str, cdd) == 1) {          //<<<<<<<<<<<<<<<<<<<Name field completion automatically

            Scanner read;

            try {
                read = new Scanner(new File(Add + "/" + cdd + "/profile.txt"), "UTF-8");
                read.useDelimiter("\\n");
                read.nextLine();
                String Ecnam = read.nextLine();
                String Hcnam = read.nextLine();
                if (lang.compareToIgnoreCase("English") != 0) {
                    name = Hcnam;
                } else {
                    name = Ecnam;
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Best_Worst.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return name;

    }

    public void status(String dt1, String dt2) {
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String str = "party.txt";
        if (CMRorPRT.getSelectedIndex() == 0) {
            str = "customer.txt";
        }
        try {
            Scanner read = new Scanner(new File(Add + "/" + str), "UTF-8");
            //System.out.println("Inside Scanner:"+Add+"/customer.txt");
            read.useDelimiter("\\n");

            while (read.hasNext()) // It's for user ... equals to the number of user
            {
                String cd = read.nextLine();
                int sts = indstatus(cd, dt1, dt2);
                if (sts != 0) {
                    model.addRow(new Object[]{cd, CMRxName(cd), sts});//Add a row to the table
                }

            }
        } catch (FileNotFoundException ex) {
            JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }

    }

    public int indstatus(String cd, String dt1, String dt2) {
        float CStatus = (float) 000.00;
        String pcode = "01/01/2020";
        float TotalG = (float) 000.00, TotalT = (float) 000.00;
        String CGstr1 = "000.00", CTstr1 = "000.00";
        System.out.print("Code:" + cd + " dt1:" + dt1 + " dt2:" + dt2);
        pcode = cd;//read.nextLine();
        //System.out.println(pcode+" rep:"+ShortFunction.repeatation(Add, "customer.txt", pcode));
        Scanner inread;
        String str = "party.txt";
        if (CMRorPRT.getSelectedIndex() == 0) {
            str = "customer.txt";
        }
        try {
            if (ShortFunction.repeatation(Add, str, pcode) == 1) {

//#########################################################################################################################################################              
                File tmp = new File(Add + "/" + pcode + "/profile.txt");
                boolean fs = tmp.exists();

//########################################################################################################
//System.out.println(Add+"/"+pcode+"/Pending/Given/"+ShortFunction.NamingDateName(dsd)+".txt");
                for (String ttd = dt1; ShortFunction.DateInBetween(dt1, ttd, dt2); ttd = ShortFunction.Date_plus(ttd)) {                             //To find the earliest Existing file
                    tmp = new File(Add + "/" + pcode + "/Pending/Given/" + ShortFunction.NamingDateName(ttd) + ".txt");
                    System.out.println(Add + "/" + pcode + "/Pending/Given/" + ShortFunction.NamingDateName(ttd) + ".txt        ::" + dt1 + ":" + ttd + ":" + dt2 + ":::" + ShortFunction.DateInBetween(dt1, ttd, dt2));
                    fs = tmp.exists();
                    if (fs) {

                        inread = new Scanner(tmp, "UTF-8");          // to get the name of customer
                        inread.useDelimiter(",|\\n");
                        inread.nextLine();
                        inread.nextLine();
                        while (inread.hasNext()) {
                            String datee = inread.next();
                            if (ShortFunction.DateInBetween(dt1, datee, dt2)) {
                                inread.next();
                                inread.next();
                                inread.next();
                                inread.next();
                                CGstr1 = inread.next();  // name of customer having code pcode
                                TotalG = TotalG + Float.valueOf(CGstr1);
                            } else {
                                inread.nextLine();
                            }
                        }
                        inread.close();
                    }

                }

//########################################################################################################
                for (String ttd = dt1; ShortFunction.DateInBetween(dt1, ttd, dt2); ttd = ShortFunction.Date_plus(ttd)) {                             //To find the earliest Existing file
                    // System.out.println(Add+"/"+pcode+"/Pending/Taken/"+ShortFunction.NamingDateName(ttd)+".txt");
                    tmp = new File(Add + "/" + pcode + "/Pending/Taken/" + ShortFunction.NamingDateName(ttd) + ".txt");
                    System.out.println(Add + "/" + pcode + "/Pending/Taken/" + ShortFunction.NamingDateName(ttd) + ".txt");
                    fs = tmp.exists();
                    if (fs) {
                        inread = new Scanner(tmp, "UTF-8");          // to get the name of customer
                        inread.useDelimiter(",|\\n");
                        inread.nextLine();
                        //inread.nextLine();
                        while (inread.hasNext()) {
                            String datee = inread.next();
                            if (ShortFunction.DateInBetween(dt1, datee, dt2)) {
                                inread.next();
                                inread.next();
                                inread.next();
                                inread.next();
                                CTstr1 = inread.next();                // name of customer having code pcode
                                TotalT = TotalT + Float.valueOf(CTstr1);
                            } else {
                                inread.nextLine();
                            }
                        }
                        inread.close();
                    }
                }

//########################################################################################################
                CStatus = TotalT - TotalG;

//########################################################################################################
            }
        } catch (FileNotFoundException ex) {
            JLabel label = new JLabel("not getting access to Customer member  !!! Error0007");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        System.out.println("  TotalT:" + TotalT + " TotalG:" + TotalG + " CStatus:" + CStatus);
        return Math.round(CStatus);
    }

    public String dater(int o) { //Monthly
        String res = "01/01/2021";
        switch (o) {
            case 0:
                res = "31/01/" + yr;
                break;
            case 1:
                res = isleap(yr) + "/02/" + yr;
                break;
            case 2:
                res = "31/03/" + yr;
                break;
            case 3:
                res = "30/04/" + yr;
                break;
            case 4:
                res = "31/05/" + yr;
                break;
            case 5:
                res = "30/06/" + yr;
                break;
            case 6:
                res = "31/07/" + yr;
                break;
            case 7:
                res = "31/08/" + yr;
                break;
            case 8:
                res = "30/09/" + yr;
                break;
            case 9:
                res = "31/10/" + yr;
                break;
            case 10:
                res = "30/11/" + yr;
                break;
            case 11:
                res = "31/12/" + yr;
                break;

        }
        return res;
    }

    public String dater_Day(int dy, int mn) { //Daily
        String res = "01/01/2021";
        res = String.format("%02d", dy + 1) + "/" + String.format("%02d", ++mn) + "/" + yr;
        return res;
    }

    public String dater_year(int y) {
        String res = "01/01/2020";
        System.out.println("Y::" + y);
        res = "31/12/" + String.valueOf(y);
        return res;
    }

    public String isleap(String yr) {
        int intyr = Integer.valueOf(yr);
        if (((intyr % 4 == 0) && (intyr % 100 != 0)) || (intyr % 400 == 0)) {
            return "29";
        } else {
            return "28";
        }
    }

    public String monthname(int o) {
        String res = "";
        switch (o) {
            case 0:
                res = "January";
                break;
            case 1:
                res = "February";
                break;
            case 2:
                res = "March";
                break;
            case 3:
                res = "April";
                break;
            case 4:
                res = "May";
                break;
            case 5:
                res = "June";
                break;
            case 6:
                res = "July";
                break;
            case 7:
                res = "August";
                break;
            case 8:
                res = "September";
                break;
            case 9:
                res = "October";
                break;
            case 10:
                res = "November";
                break;
            case 11:
                res = "December";
                break;

        }
        return res;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Best_Worst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Best_Worst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Best_Worst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Best_Worst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Best_Worst().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CMRorPRT;
    private javax.swing.JButton done;
    private javax.swing.JComboBox interval;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox month;
    private javax.swing.JTable table;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables
}
