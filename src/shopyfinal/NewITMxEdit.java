/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopyfinal;

import java.awt.AWTException;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Suthar
 */
public class NewITMxEdit extends javax.swing.JFrame {
int yt=0;
    String baseadd,logo,user,ITMadd,prvst="0.0";
    String strD,lang="English";
    String IDyear="2020-2020",Syear="01/01/2020",Eyear="01/01/2020";
    public NewITMxEdit(String base,String golo ,String idy, String sy,String ey) {
        baseadd=base;
        logo=golo;
        IDyear = idy;
        Syear = sy;
        Eyear = ey;
        try {
            user = GetLine.mainn(baseadd+"/Cuser.txt", 2);
        } catch (IOException ex) {
            JLabel label = new JLabel("Current user !!! Error0003");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
        }
        ITMadd=baseadd+"/"+user+"/"+IDyear+"/item";
        initComponents();
        this.setLocationRelativeTo(null);
        try {
            this.setIconImage(ImageIO.read(new File(logo)));
        } catch (IOException ex) {
            JLabel label = new JLabel("Logo Problem !!! Error0001");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
       
        }
        
        try {
        Robot r=new Robot();
        r.keyPress(KeyEvent.VK_ALT);
        r.keyPress(KeyEvent.VK_SHIFT);
        r.keyPress(KeyEvent.VK_0);
        r.keyRelease(KeyEvent.VK_0);
        r.keyRelease(KeyEvent.VK_SHIFT);
        r.keyRelease(KeyEvent.VK_ALT);
    } catch (AWTException ex) {
        JLabel label = new JLabel("Language Setup Error !!");        
        label.setFont(new Font("Arial", Font.BOLD, 18));        
        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
    }
        
        
        //################################
        //Language setup
        try {
        lang = GetLine.mainn(baseadd+"/"+user+"/conf.txt", 1);
        System.out.println(lang);
        } catch (IOException ex) {
        JLabel label = new JLabel("Configuration Error !!! Error0003");
        label.setFont(new Font("Arial", Font.BOLD, 18));
        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
        }
        if(lang.compareToIgnoreCase("English")!=0){
           hdlbl.setText("किसी आइटम का विवरण संपादित करें");
           cdlbl.setText("कोड :");
           Go.setText("आगे");
           hd2lbl.setText("-:: नया विवरण दर्ज करें ::-");
           enmlbl.setText("नाम (अग्रेजी मे) :");
           hnmlbl.setText("नाम (हिन्दी मे) :");
           rtlbl.setText("रेट :");
           stcklbl.setText("शुरुआती स्टोक :");
           minlbl.setText("न्यूनतम आवश्यक स्टॉक :");
           Dtlbl.setText("जोड़ने की दिनांक :");
           cancel.setText("रद्द करे");
           close.setText(" बंद ");
           save.setText(" सेव ");
        }
        
        
        Date datee = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");  
    strD = formatter.format(datee);
       
        icode.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cdlbl = new javax.swing.JLabel();
        enmlbl = new javax.swing.JLabel();
        rtlbl = new javax.swing.JLabel();
        iEname = new javax.swing.JTextField();
        rate = new javax.swing.JTextField();
        Go = new javax.swing.JButton();
        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        hdlbl = new javax.swing.JLabel();
        stcklbl = new javax.swing.JLabel();
        stock = new javax.swing.JTextField();
        Dtlbl = new javax.swing.JLabel();
        dt = new javax.swing.JTextField();
        hd2lbl = new javax.swing.JLabel();
        SCP = new javax.swing.JScrollPane();
        newtb = new javax.swing.JTable();
        icode = new javax.swing.JTextField();
        redt = new java.awt.Checkbox();
        hnmlbl = new javax.swing.JLabel();
        iHname = new javax.swing.JTextField();
        minlbl = new javax.swing.JLabel();
        min = new javax.swing.JTextField();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editing item Details");
        setAlwaysOnTop(true);

        cdlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        cdlbl.setText("Code :");

        enmlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        enmlbl.setText("Name(in English) :");

        rtlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        rtlbl.setText("Rate :");

        iEname.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        iEname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                iEnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                iEnameFocusLost(evt);
            }
        });
        iEname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                iEnameKeyPressed(evt);
            }
        });

        rate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        rate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rateFocusLost(evt);
            }
        });
        rate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rateKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rateKeyTyped(evt);
            }
        });

        Go.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        Go.setText("Go");
        Go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoActionPerformed(evt);
            }
        });
        Go.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GoKeyPressed(evt);
            }
        });

        save.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        save.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveKeyPressed(evt);
            }
        });

        close.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        hdlbl.setBackground(new java.awt.Color(0, 0, 240));
        hdlbl.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        hdlbl.setForeground(new java.awt.Color(240, 0, 240));
        hdlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hdlbl.setText("Edit Details of An Item");
        hdlbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.white, java.awt.Color.black));

        stcklbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        stcklbl.setText("Initial Stock :");

        stock.setBackground(new java.awt.Color(255, 0, 0));
        stock.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                stockFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockFocusLost(evt);
            }
        });
        stock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stockKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockKeyTyped(evt);
            }
        });

        Dtlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        Dtlbl.setText("Date of Addition :");

        dt.setEditable(false);
        dt.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dtFocusGained(evt);
            }
        });
        dt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dtKeyPressed(evt);
            }
        });

        hd2lbl.setBackground(new java.awt.Color(0, 240, 240));
        hd2lbl.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        hd2lbl.setForeground(new java.awt.Color(240, 0, 0));
        hd2lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hd2lbl.setText("-:: Enter New Details ::-");
        hd2lbl.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        SCP.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        newtb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SCP.setViewportView(newtb);

        icode.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        icode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                icodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                icodeFocusLost(evt);
            }
        });
        icode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                icodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                icodeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                icodeKeyTyped(evt);
            }
        });

        redt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        redt.setLabel("Editability");

        hnmlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        hnmlbl.setText("Name(in Hindi):");

        iHname.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        iHname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                iHnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                iHnameFocusLost(evt);
            }
        });
        iHname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iHnameActionPerformed(evt);
            }
        });
        iHname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                iHnameKeyPressed(evt);
            }
        });

        minlbl.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        minlbl.setText("Minimum Stock Req. :");

        min.setBackground(new java.awt.Color(255, 240, 0));
        min.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        min.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                minFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                minFocusLost(evt);
            }
        });
        min.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minKeyTyped(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(hdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Dtlbl)
                            .addComponent(enmlbl)
                            .addComponent(cdlbl)
                            .addComponent(hnmlbl)
                            .addComponent(rtlbl)
                            .addComponent(stcklbl)
                            .addComponent(minlbl)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SCP, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(redt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(hd2lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(icode)
                                                .addGap(115, 115, 115)
                                                .addComponent(Go, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(iEname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                                            .addComponent(iHname, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)))
                                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)))))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(hdlbl)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cdlbl)
                    .addComponent(Go)
                    .addComponent(icode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SCP, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hd2lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enmlbl)
                            .addComponent(iEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hnmlbl)
                            .addComponent(iHname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rtlbl)))
                    .addComponent(redt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stcklbl))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minlbl)
                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Dtlbl))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close)
                    .addComponent(save)
                    .addComponent(cancel))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeActionPerformed

    private void iEnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iEnameFocusGained
            iEname.selectAll();
    }//GEN-LAST:event_iEnameFocusGained

    private void rateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rateFocusGained
            rate.selectAll();
    }//GEN-LAST:event_rateFocusGained

    private void iEnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iEnameKeyPressed
        int a = evt.getKeyCode();
        if(a==10){
            iHname.requestFocus();
        }
    }//GEN-LAST:event_iEnameKeyPressed

    private void rateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyPressed
        int a = evt.getKeyCode();
        if(a==10)
            stock.requestFocus();     
        
    }//GEN-LAST:event_rateKeyPressed

    private void GoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoActionPerformed
String Enam="No Name",Hnam="कोई नाम नहीं",irate="000.00",istck="0.0",adt = "01/01/2020",edt="true",minreq="0.0";
if(repeatation.mainn(ITMadd, "item.txt", icode.getText())==1){
    //TextIO.putln("inside of if");

            try {
                
                Scanner in ;
                in = new Scanner(new File(ITMadd + "/" + icode.getText() + "/profile.txt"),"UTF-8");
                in.nextLine();
                Enam = in.nextLine();
                Hnam = in.nextLine();
                irate = in.nextLine();
                istck = in.nextLine();
                edt = in.nextLine();
                adt = in.nextLine();
                minreq = in.nextLine();
                in.close();
                
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("something wrong 2"+ex);
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.ERROR_MESSAGE);
                //errmessage.mainn("something wrong 2", 200, 150);
            }
            
            iEname.setText(Enam);
            iHname.setText(Hnam);
            rate.setText(irate);
            stock.setText(istck); prvst=istck;
            dt.setText(adt);
            redt.setState(Boolean.valueOf(edt));
            min.setText(minreq);
            icode.setEditable(false);
            icode.setFocusable(false);
            iEname.requestFocus();
            


                }
else {
    icode.requestFocus();
    JLabel label = new JLabel("There is no item Having this code ");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.ERROR_MESSAGE);
    //errmessage.mainn("There is no item Having code as you entered", 300, 150);
}
    }//GEN-LAST:event_GoActionPerformed

    private void GoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GoKeyPressed
        int a=evt.getKeyCode();
        if(a==10)
        {
            Go.doClick();
        }
    }//GEN-LAST:event_GoKeyPressed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
this.setAlwaysOnTop(false);
        int yon = JOptionPane.showConfirmDialog(null,"Do you want to Save ??!","Confirmation .......",JOptionPane.OK_OPTION);
        if(yon==0&&(!icode.getText().isEmpty()) && !min.getText().isEmpty() && !dt.getText().isEmpty()){//YES   
            
            if(iEname.getText().isEmpty())
                iEname.setText("No Item Name");
            if(iHname.getText().isEmpty())
                iHname.setText("आइटम का कोई नाम नहीं");
            if(rate.getText().isEmpty())
                rate.setText("0.0");
            if(stock.getText().isEmpty())
                stock.setText("0.0");
            
        try {
                     PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(ITMadd + "/"+icode.getText()+"/profile.txt"), "UTF-8"));

            out.println(icode.getText());
            out.println(iEname.getText());
            out.println(iHname.getText());
            out.println(rate.getText());
            out.println(stock.getText());
            out.println(redt.getState());
            out.println(dt.getText());
            out.println(min.getText());
            out.close();
            
            //Updating Stock if Chnaged
            boolean cd=false; 
            String nstrk ="0.0",strk="0.0", ddt = NamingDate.mainn(dt.getText());
            if(Float.compare(Float.valueOf(stock.getText()), Float.valueOf(prvst)) != 0) {
                //System.out.println("Updating Stock as Different");
                cd=DateInBetween.mainn(NamingDate.mainn(dt.getText()), ddt,strD);
                //System.out.println("Working on :"+ddt+">>>"+cd);
              while(cd){
                  //System.out.println(ITMadd + "/" + code.getText() + "/Status/"+NamingDateName.mainn(ddt)+".txt");
                  //System.out.println("Inside while");
              Scanner in;
                
               // System.out.println(ITMadd + "/" + code.getText() + "/Status/"+NamingDateName.mainn(ddt)+".txt");
                
                try {
                    in = new Scanner(new File(ITMadd + "/" + icode.getText() + "/Status/"+NamingDateName.mainn(ddt)+".txt"),"UTF-8");
                    //System.out.println(ITMadd + "/" + code.getText() + "/Status/"+NamingDateName.mainn(ddt)+".txt");
                    strk=in.nextLine();
                    in.close();
                    
                    nstrk = String.valueOf(Float.valueOf(strk)-Float.valueOf(prvst)+Float.valueOf(stock.getText()));
                    ReplaceLineWN.mainn(ITMadd + "/" + icode.getText()+"/Status", NamingDateName.mainn(ddt)+".txt", 1, nstrk);
                } catch (IOException ex) {
                    //System.out.println("THERE IS ERROE ????121");
                    /*JLabel label = new JLabel("item Data. Error !!! Error0016");
                    label.setFont(new Font("Arial", Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null,label,"Error !!!",JOptionPane.ERROR_MESSAGE);*/
                     }
                  
              ddt = datep15.mainn(ddt);
              cd=DateInBetween.mainn(NamingDate.mainn(dt.getText()), ddt,strD);
                //System.out.println("Working on :"+NamingDate.mainn(dt.getText())+"<<<"+ddt+">>>>"+strD+"======"+cd);
              } 
            }
            
            cancel.doClick();
            icode.setText("");
            icode.requestFocus();
             JLabel label = new JLabel("Successfully");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null,label,"SUCCESSFUL",JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            System.out.println("THERE IS ERROE 121");
            JLabel label = new JLabel("item profile. Error !!! Error0013");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
        
        }
        
    }
        else{//NO
            this.setAlwaysOnTop(true);
            JLabel label = new JLabel("Fill things Approperiately  !!!");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            icode.requestFocus();
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveKeyPressed
            int a= evt.getKeyCode();
            if(a==10){
             save.doClick();
            }
            
    }//GEN-LAST:event_saveKeyPressed

    private void stockFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockFocusGained
        stock.selectAll();
    }//GEN-LAST:event_stockFocusGained

    private void stockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockKeyPressed
        int a=evt.getKeyCode();
        if(a==10)
            min.requestFocus();
    }//GEN-LAST:event_stockKeyPressed

    private void rateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyTyped
        char c = evt.getKeyChar();
        //System.out.println(c);
        //char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c=='.'||c==10) )){    //
            getToolkit().beep();
            evt.consume();
        }   
    }//GEN-LAST:event_rateKeyTyped

    private void dtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_dtFocusGained

    private void dtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtKeyPressed

    private void iEnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iEnameFocusLost
if(iEname.getText().isEmpty())
    iEname.setText("No Name");
    }//GEN-LAST:event_iEnameFocusLost

    private void rateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rateFocusLost
if(rate.getText().isEmpty())
    rate.setText("0.0");
    }//GEN-LAST:event_rateFocusLost

    private void stockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockFocusLost
if(stock.getText().isEmpty())
    stock.setText("0.0");
    }//GEN-LAST:event_stockFocusLost

    private void stockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c=='.'||c==10) )){    //
            getToolkit().beep();
            evt.consume();
        }  
    }//GEN-LAST:event_stockKeyTyped

    private void icodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_icodeFocusGained
        yt=0;
        this.setAlwaysOnTop(true);
        newtb.setVisible(true);
        SCP.setVisible(true);
        icode.selectAll();
        //
        DefaultTableModel model = (DefaultTableModel)newtb.getModel();
        SCP.setBounds(191, 166, 200, 200);
        model.setRowCount(0);
        String tb,dtb;
        tb=icode.getText();
        //tb=tb+evt.getKeyChar();
        tb=icode.getText();
        //if(tb==null)
        //tb="";
        //tb="dl";
        //top.setText("1"+tb);
        if(!tb.isEmpty()){
            tb=icode.getText();
            SCP.setVisible(true);
            //js.setVisible(true);
            //ssadd(js);
            newtb.setVisible(true);
            //FileReader stream = new FileReader("C:\\Users\\Suthar\\Desktop/item/item.txt");
            //System.out.println("Not Emptyand:"+tb);
            Scanner read ;
            String icode,Ename = "Null",Hname="Null",irate,dcode,dEname,dHname;
            try {
                read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                read.useDelimiter("\\n");
                while(read.hasNext()){
                    icode = read.nextLine();
                    Scanner inner;
                    //System.out.println("Inner"+tb);

                    try {
                        inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                        icode=inner.nextLine();
                        Ename=inner.nextLine();
                        Hname=inner.nextLine();
                        irate=inner.nextLine();
                        dcode = icode.toUpperCase();
                        dEname = Ename.toUpperCase();
                        dHname=Hname;
                        dtb= tb.toUpperCase();
                        inner.close();
                        if(dcode.contains(dtb)){

                            if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }

                        }
                        else{
                            if(dEname.contains(dtb)){
                                if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }

                            }else{
                                if(dHname.contains(dtb)){
                                if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }

                            }
                            }

                        }
                    } catch (FileNotFoundException ex) {
                        JLabel label = new JLabel("Item Profile Error !!! Error0013");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                    }

                }
                read.close();
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("Item .Item !!! Error0015");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            }
            if(newtb.getRowCount()>0)
            newtb.setRowSelectionInterval(0, 0);
            else
            newtb.clearSelection();
            //newtb.setRowSelectionInterval(0, 0);
        }
        else{           // Nothing is entered in icode
            //tb=icode.getText();
            SCP.setVisible(true);
            //js.setVisible(true);
            //ssadd(js);
            newtb.setVisible(true);
            //FileReader stream = new FileReader("C:\\Users\\Suthar\\Desktop/item/item.txt");
            //System.out.println("Not Emptyand:"+tb);
            Scanner read ;
            String icode,Ename = "Null",Hname="Null",irate;
            try {
                read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                read.useDelimiter("\\n");
                while(read.hasNext()){
                    icode = read.nextLine();
                    Scanner inner;
                    //System.out.println("Inner"+tb);

                    try {
                        inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                        icode=inner.nextLine();
                        Ename=inner.nextLine();
                        Hname=inner.nextLine();
                        irate=inner.nextLine();
                        inner.close();
                       
                                if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }

                    } catch (FileNotFoundException ex) {
                        JLabel label = new JLabel("Item Profile !!! Error0013");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                    }

                }
                read.close();
            } catch (FileNotFoundException ex) {
                JLabel label = new JLabel("Item .item !!! Error0015");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            }
            if(newtb.getRowCount()>0)
            newtb.setRowSelectionInterval(0, 0);
            else
            newtb.clearSelection();
            //newtb.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_icodeFocusGained

    private void icodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_icodeFocusLost
        // TODO add your handling code here:
        SCP.setVisible(false);
    }//GEN-LAST:event_icodeFocusLost

    private void icodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_icodeKeyPressed

    }//GEN-LAST:event_icodeKeyPressed

    private void icodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_icodeKeyReleased
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel)newtb.getModel();
        SCP.setBounds(191, 166, 200, 200);

        if(evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(newtb.getSelectedRow()<(newtb.getRowCount()-1)){
                //System.out.println("Down Is PRESSED ++++++");
                newtb.setRowSelectionInterval(1+newtb.getSelectedRow(), 1+newtb.getSelectedRow());
                newtb.scrollRectToVisible(new Rectangle(newtb.getCellRect(newtb.getSelectedRow(), 0, true)));
            }
            //table.setVisible(false);
        }else{
            if(evt.getKeyCode()==KeyEvent.VK_UP){
                //System.out.println("Up is PRESSED-----------");
                if(newtb.getSelectedRow()>0){
                    newtb.setRowSelectionInterval(-1+newtb.getSelectedRow(), -1+newtb.getSelectedRow());
                    newtb.scrollRectToVisible(new Rectangle(newtb.getCellRect(newtb.getSelectedRow(), 0, true)));
                }
            }
            //

            //
            else{
                if(evt.getKeyCode()==10){
                    ++yt;
                    if(yt>1){
                        if(newtb.getSelectedRow()>=0){
                            Object o = newtb.getValueAt(newtb.getSelectedRow(), 0);
                            String cd =    String.valueOf(o);
                            icode.setText(cd);
                            //table.setVisible(false);
                            Go.requestFocus();
                            SCP.setVisible(false);
/*
                            String itm = icode.getText();
                            if(repeatationWOcase.mainn(ITMadd, "item.txt", itm)==1){                // If we get Item code is existing the do ....

                                Scanner read ;
                                try {
                                    read = new Scanner(new File(ITMadd + "/" + itm + "/profile.txt"),"UTF-8");
                                    read.useDelimiter("\\n");
                                    read.nextLine();
                                    String Enam = read.nextLine();
                                    String Hnam = read.nextLine();
                                    iEname.setText(Enam);
                                    iHname.setText(Hnam);
                                    String sprice = read.nextLine();
                                    float price = Float.parseFloat(sprice);
                                    rate.setText(sprice);
                                    read.close();
                                    Go.requestFocus();
                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile file is not opening !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);

                                }

                            }
                            else                            // If Icode is not Matching to any of Icode the showing error
                            {
                                icode.requestFocus();
                                JLabel label = new JLabel("This item code does not exist !!! ");
                                label.setFont(new Font("Arial", Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null,label,"Warning !!",JOptionPane.WARNING_MESSAGE);

                            }*/

                        }else{
                            icode.requestFocus();
                            JLabel label = new JLabel("This item code does not exist !!! ");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"Warning !!",JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    else{
                        icode.requestFocus();
                    }
                }
                else{

                    //
                    model.setRowCount(0);
                    String tb,dtb;

                    tb=icode.getText();
                    if(!tb.isEmpty()){
                        tb=icode.getText();
                        SCP.setVisible(true);
                        newtb.setVisible(true);
                        Scanner read ;
                        String icode,Ename = "Null",Hname="Null",irate,dcode,dEname,dHname;
                        try {
                            read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                            read.useDelimiter("\\n");
                            while(read.hasNext()){
                                icode = read.nextLine();
                                Scanner inner;
                                
                                try {
                                    inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                                    icode=inner.nextLine();
                                    Ename=inner.nextLine();
                                    Hname=inner.nextLine();
                                    irate=inner.nextLine();
                                    dcode = icode.toUpperCase();
                                    dEname = Hname.toUpperCase();
                                    dHname = Hname;
                                    dtb= tb.toUpperCase();
                                    inner.close();
                                    if(dcode.contains(dtb)){
                                        if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }

                                    }
                                    else{
                                        if(dEname.contains(dtb)){
                                            if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }
                                        }
                                        else{
                                            if(dHname.contains(dtb)){
                                            
                                                if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }
                                            
                                        }
                                        }

                                    }
                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile.txt error !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                                }

                            }
                            read.close();
                        } catch (FileNotFoundException ex) {
                            JLabel label = new JLabel("Item.item.txt error !!! Error0015");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                        }
                        if(newtb.getRowCount()>0)
                        newtb.setRowSelectionInterval(0, 0);
                        else
                        newtb.clearSelection();
                        //newtb.setRowSelectionInterval(0, 0);
                    }
                    else{           // Nothing is entered in icode
                        SCP.setVisible(true);
                        newtb.setVisible(true);
                        Scanner read ;
                        String icode,Ename = "Null",Hname="Null",irate,dcode,dname;
                        try {
                            read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                            read.useDelimiter("\\n");
                            while(read.hasNext()){
                                icode = read.nextLine();
                                Scanner inner;
                                
                                try {
                                    inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                                    icode=inner.nextLine();
                                    Ename=inner.nextLine();
                                    Hname=inner.nextLine();
                                    irate=inner.nextLine();
                                    inner.close();
                                        if(lang.compareToIgnoreCase("English")!=0){
                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,Hname,irate});
                                        }
                                        else{
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,Ename,irate});
                                        }
                                        
                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile.txt error !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                                }

                            }
                            read.close();
                        } catch (FileNotFoundException ex) {
                            JLabel label = new JLabel("Item.item.txt error !!! Error0015");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                        }
                        if(newtb.getRowCount()>0)
                        newtb.setRowSelectionInterval(0, 0);
                        else
                        newtb.clearSelection();
                        //newtb.setRowSelectionInterval(0, 0);
                    }

                }
            }
        }

    }//GEN-LAST:event_icodeKeyReleased

    private void icodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_icodeKeyTyped
        // TODO add your handling code here:
        int a= evt.getKeyCode();
        if(a==10){
            evt.consume();
        }
    }//GEN-LAST:event_icodeKeyTyped

    private void iHnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iHnameFocusGained
        iHname.selectAll();
        
    try {
        Robot r=new Robot();
        r.keyPress(KeyEvent.VK_ALT);
        r.keyPress(KeyEvent.VK_SHIFT);
        r.keyPress(KeyEvent.VK_1);
        r.keyRelease(KeyEvent.VK_1);
        r.keyRelease(KeyEvent.VK_SHIFT);
        r.keyRelease(KeyEvent.VK_ALT);
    } catch (AWTException ex) {
        JLabel label = new JLabel("Language Setup Error !!");        
        label.setFont(new Font("Arial", Font.BOLD, 18));        
        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
    }
       
    }//GEN-LAST:event_iHnameFocusGained

    private void iHnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iHnameFocusLost
        if(iHname.getText().isEmpty())
    iHname.setText("कोई नाम नहीं");
        
    try {
        Robot r=new Robot();
        r.keyPress(KeyEvent.VK_ALT);
        r.keyPress(KeyEvent.VK_SHIFT);
        r.keyPress(KeyEvent.VK_0);
        r.keyRelease(KeyEvent.VK_0);
        r.keyRelease(KeyEvent.VK_SHIFT);
        r.keyRelease(KeyEvent.VK_ALT);
    } catch (AWTException ex) {
        JLabel label = new JLabel("Language Setup Error !!");        
        label.setFont(new Font("Arial", Font.BOLD, 18));        
        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
    }
        
    }//GEN-LAST:event_iHnameFocusLost

    private void iHnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iHnameKeyPressed
        int a= evt.getKeyCode();
        if(a==10)
            rate.requestFocus();
    }//GEN-LAST:event_iHnameKeyPressed

    private void iHnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iHnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iHnameActionPerformed

    private void minFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minFocusGained
        // TODO add your handling code here:
        min.selectAll();
    }//GEN-LAST:event_minFocusGained

    private void minFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minFocusLost
       if(stock.getText().isEmpty())
    stock.setText("0.0");
    }//GEN-LAST:event_minFocusLost

    private void minKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minKeyPressed
        // TODO add your handling code here:
        int a=evt.getKeyCode();
        if(a==10)
            save.requestFocus();
        
    }//GEN-LAST:event_minKeyPressed

    private void minKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c=='.'||c==10) )){    //
            getToolkit().beep();
            evt.consume();
        }  
    }//GEN-LAST:event_minKeyTyped

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        icode.setEditable(true);
        icode.setFocusable(true);
        iEname.setText(null);
            iHname.setText(null);
            rate.setText(null);
            stock.setText(null);
            dt.setText(null);
            min.setText(null);
            icode.requestFocus();
    }//GEN-LAST:event_cancelActionPerformed
public void coder(int e){
            // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel)newtb.getModel();
        SCP.setBounds(191, 166, 200, 200);
        int keyCode = e;

        if(keyCode==40){
            if(newtb.getSelectedRow()<(newtb.getRowCount()-1)){
                //System.out.println("Down Is PRESSED ++++++");
                newtb.setRowSelectionInterval(1+newtb.getSelectedRow(), 1+newtb.getSelectedRow());
                newtb.scrollRectToVisible(new Rectangle(newtb.getCellRect(newtb.getSelectedRow(), 0, true)));
            }
            //table.setVisible(false);
        }else{
            if(keyCode==38){
                //System.out.println("Up is PRESSED-----------");
                if(newtb.getSelectedRow()>0){
                    newtb.setRowSelectionInterval(-1+newtb.getSelectedRow(), -1+newtb.getSelectedRow());
                    newtb.scrollRectToVisible(new Rectangle(newtb.getCellRect(newtb.getSelectedRow(), 0, true)));
                }
            }
           
            else{
                if(keyCode==10){
                    ++yt;
                    if(yt>1){
                        if(newtb.getSelectedRow()>=0){
                            Object o = newtb.getValueAt(newtb.getSelectedRow(), 0);
                            String cd =    String.valueOf(o);
                            icode.setText(cd);
                            //table.setVisible(false);
                            SCP.setVisible(false);

                            String itm = icode.getText();
                            if(repeatationWOcase.mainn(ITMadd, "item.txt", itm)==1){                // If we get Item code is existing the do ....

                                Scanner read ;
                                try {
                                    read = new Scanner(new File(ITMadd + "/" + itm + "/profile.txt"),"UTF-8");
                                    read.useDelimiter("\\n");
                                    read.nextLine();
                                    String nam = read.nextLine();
                                    iEname.setText(nam);
                                    String sprice = read.nextLine();
                                    float price = Float.parseFloat(sprice);
                                    rate.setText(sprice);
                                    read.close();
                                    iEname.requestFocus();
                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile file is not opening !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);

                                }

                            }
                            else                            // If Icode is not Matching to any of Icode the showing error
                            {
                                icode.requestFocus();
                                JLabel label = new JLabel("This item code does not exist !!! ");
                                label.setFont(new Font("Arial", Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null,label,"Warning !!",JOptionPane.WARNING_MESSAGE);

                            }

                        }else{
                            icode.requestFocus();
                            JLabel label = new JLabel("This item code does not exist !!! ");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"Warning !!",JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    else{
                        icode.requestFocus();
                    }
                }
                else{

                    //
                    model.setRowCount(0);
                    String tb,dtb;

                    tb=icode.getText();
                    if(!tb.isEmpty()){
                        tb=icode.getText();
                        SCP.setVisible(true);
                        newtb.setVisible(true);
                        Scanner read ;
                        String icode,iname = "Null",irate,dcode,dname;
                        try {
                            read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                            read.useDelimiter("\\n");
                            while(read.hasNext()){
                                icode = read.nextLine();
                                Scanner inner;
                                //System.out.println("Inner"+tb);

                                try {
                                    inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                                    icode=inner.nextLine();
                                    iname=inner.nextLine();
                                    irate=inner.nextLine();
                                    dcode = icode.toUpperCase();
                                    dname = iname.toUpperCase();
                                    dtb= tb.toUpperCase();
                                    inner.close();
                                    if(dcode.contains(dtb)){

                                        model.insertRow(newtb.getRowCount(),new Object[]{icode,iname,irate});

                                    }
                                    else{
                                        if(dname.contains(dtb)){
                                            model.insertRow(newtb.getRowCount(),new Object[]{icode,iname,irate});

                                        }

                                    }
                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile.txt error !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                                }

                            }
                            read.close();
                        } catch (FileNotFoundException ex) {
                            JLabel label = new JLabel("Item.item.txt error !!! Error0015");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                        }
                        if(newtb.getRowCount()>0)
                        newtb.setRowSelectionInterval(0, 0);
                        else
                        newtb.clearSelection();
                        //newtb.setRowSelectionInterval(0, 0);
                    }
                    else{           // Nothing is entered in icode
                        //tb=icode.getText();
                        SCP.setVisible(true);
                        //js.setVisible(true);
                        //ssadd(js);
                        newtb.setVisible(true);
                        //FileReader stream = new FileReader("C:\\Users\\Suthar\\Desktop/item/item.txt");
                        //System.out.println("Not Emptyand:"+tb);
                        Scanner read ;
                        String icode,iname = "Null",irate,dcode,dname;
                        try {
                            read = new Scanner(new File(ITMadd+"/item.txt"),"UTF-8");

                            read.useDelimiter("\\n");
                            while(read.hasNext()){
                                icode = read.nextLine();
                                Scanner inner;
                                //System.out.println("Inner"+tb);

                                try {
                                    inner = new Scanner(new File(ITMadd+"/"+icode+"/profile.txt"),"UTF-8");
                                    icode=inner.nextLine();
                                    iname=inner.nextLine();
                                    irate=inner.nextLine();
                                    inner.close();

                                    model.insertRow(newtb.getRowCount(),new Object[]{icode,iname,irate});

                                } catch (FileNotFoundException ex) {
                                    JLabel label = new JLabel("Item profile.txt error !!! Error0013");
                                    label.setFont(new Font("Arial", Font.BOLD, 18));
                                    JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                                }

                            }
                            read.close();
                        } catch (FileNotFoundException ex) {
                            JLabel label = new JLabel("Item.item.txt error !!! Error0015");
                            label.setFont(new Font("Arial", Font.BOLD, 18));
                            JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                        }
                        if(newtb.getRowCount()>0)
                        newtb.setRowSelectionInterval(0, 0);
                        else
                        newtb.clearSelection();
                        //newtb.setRowSelectionInterval(0, 0);
                    }

                }
            }
        }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewITMxEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewITMxEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewITMxEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewITMxEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new NewITMxEdit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dtlbl;
    private javax.swing.JButton Go;
    private javax.swing.JScrollPane SCP;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel cdlbl;
    private javax.swing.JButton close;
    private javax.swing.JTextField dt;
    private javax.swing.JLabel enmlbl;
    private javax.swing.JLabel hd2lbl;
    private javax.swing.JLabel hdlbl;
    private javax.swing.JLabel hnmlbl;
    private javax.swing.JTextField iEname;
    private javax.swing.JTextField iHname;
    private javax.swing.JTextField icode;
    private javax.swing.JTextField min;
    private javax.swing.JLabel minlbl;
    private javax.swing.JTable newtb;
    private javax.swing.JTextField rate;
    private java.awt.Checkbox redt;
    private javax.swing.JLabel rtlbl;
    private javax.swing.JButton save;
    private javax.swing.JLabel stcklbl;
    private javax.swing.JTextField stock;
    // End of variables declaration//GEN-END:variables
}
